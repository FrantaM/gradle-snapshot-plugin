/**
 * A Gradle plugin to generate build metadata from Source Control Management (SCM) tools.
 */

apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'idea'

group   = 'me.cmoz.gradle'
version = '2.0.2'

repositories {
    mavenCentral()
    maven {
        url 'http://maven.tmatesoft.com/content/repositories/releases/'
    }
}

configurations {
    providedCompile
}

sourceSets {
    main {
        compileClasspath += configurations.providedCompile
    }

    test {
        compileClasspath += configurations.providedCompile
    }
}

dependencies {
    providedCompile(
        [group: 'org.projectlombok', name: 'lombok', version: '1.14.8'],
        [group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0']
    )

    compile(
        gradleApi(),
        [group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '3.6.0.201411121045-m1'],
        [group: 'org.tmatesoft.hg4j', name: 'hg4j', version: '1.1.0']
    )

    testCompile(
        localGroovy(),
        [group: 'junit', name: 'junit', version: '4.11'],
        [group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3']
    )
}

compileJava {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
    options.compilerArgs = [
        // enable all warnings as errors
        '-Xlint:cast,deprecation,divzero,empty,unchecked,fallthrough,path,serial,finally,overrides,-options',
        '-Werror',
        '-XprintProcessorInfo'
    ]
    options.encoding = 'UTF-8'
    options.fork = true
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Created-By': "Gradle $gradle.gradleVersion",
                   'Build-Jdk': System.properties['java.version']
    }
}

javadoc {
    classpath += configurations.providedCompile
}

task sourceJar(type: Jar, dependsOn: classes) {
    baseName = project.name
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = project.name
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    if (!version.endsWith('SNAPSHOT')) {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            if (!version.endsWith('SNAPSHOT')) {
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            } else {
                repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
            // configure basic POM information
            pom.project {
                groupId project.group
                artifactId 'gradle-snapshot-plugin'
                version project.version
                packaging 'jar'
                name 'Gradle Snapshot Plugin'
                description 'Snapshot plugin for the Gradle build system.'
                url 'http://github.com/novabyte/gradle-snapshot-plugin'
                inceptionYear '2012'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'http://github.com/novabyte/gradle-snapshot-plugin'
                    connection 'scm:git://github.com/novabyte/gradle-snapshot-plugin.git'
                    developerConnection 'scm:git@github.com:novabyte/gradle-snapshot-plugin.git'
                }
                developers {
                    developer {
                        id 'novabyte'
                        name 'Chris Molozian'
                        email 'chris@cmoz.me'
                    }
                }
            }
        }
    }
}
uploadArchives.dependsOn ':build'
