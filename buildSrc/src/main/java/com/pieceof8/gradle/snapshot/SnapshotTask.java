// vi: set softtabstop=4 shiftwidth=4 expandtab:
/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pieceof8.gradle.snapshot;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map.Entry;
import java.util.Properties;

import lombok.*;

import org.gradle.api.DefaultTask;
import org.gradle.api.Project;
import org.gradle.api.tasks.TaskAction;

/**
 * A task to extract build information from an SCM repository and generate a
 * file with the most recent commit data.
 */
class SnapshotTask extends DefaultTask {

    /** An output label for the properties file. */
    private static final String BUILD_LABEL =
            "Generated by the Gradle Snapshot Plugin";

    /** The configuration object for this task. */
    private final @NonNull SnapshotPluginExtension extension;

    /** The properties to store build information collected from the SCM. */
    @Getter
    private final @NonNull File snapshotFile;

    /**
     * Initialises the task with default values, obtained from the extension
     * object.
     *
     * @see com.pieceof8.gradle.snapshot.SnapshotPluginExtension
     */
    public SnapshotTask() {
        final Project project = getProject();
        File outputDir = new File(project.getBuildDir(), "snapshot");
        outputDir.mkdirs();

        extension = project.getExtensions()
                .getByType(SnapshotPluginExtension.class);
        snapshotFile = new File(outputDir, extension.getFilename());
    }

    /**
     * The main action for this task.
     *
     * <p>The task generates metadata from the SCM for the most recent commit
     * and stores it to the {@code snapshotFile} location for storing with
     * JAR and WAR packages.
     */
    @TaskAction
    @SneakyThrows(IOException.class)
    public void action() {
        ScmProviderFactory factory = new ScmProviderFactory(getProject());
        val scmProvider = factory.createScmProvider();

        if (scmProvider == null) {
            val msg = "  No supported SCM repository found, skipping task.";
            System.out.println(msg);
            return;
        }

        final Properties properties = new Properties();
        final Commit commit = scmProvider.getCommit();

        for (Entry<String, String> pair : commit.toMap().entrySet()) {
            // make the build information available to the project properties
            getProject().getExtensions().getExtraProperties()
                    .set(pair.getKey(), pair.getValue());
            if (extension.isVerbose())
                System.out.println("  " + pair);
        }

        properties.putAll(commit.toMap());
        properties.store(new FileWriter(snapshotFile), BUILD_LABEL);
    }

}
